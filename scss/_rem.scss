// 基準となるフォントサイズ
$root-font-size:10 !default;

// @function parseInt
// @param $n {String} 数値に変換したい文字列
@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}

// @function rem
// @description 単位なしの数値・もしくはpxならremに変換、remの場合はpxに変換(remに対応してないブラウザ向け)
// @param $value {Number} 数値

@function rem($value) {
	$root: $root-font-size;
	$val: parseInt($value);
  $unit: unit($value);
	$result:"";

	@if $unit == "px" or $unit == "" {
		$result: ($val / $root + 0rem);
	}
	@if $unit == "rem"{
		$result: ($val * $root + 0px);
	}

	@return $result;
}

// @mixin rem
// @description 単位なしの数値・もしくはpxならremに変換、remの場合はpxに変換(remに対応してないブラウザ向け)
// @param $property {String} プロパティ名
// @param $values {Number} 数値（複数可）
// @usage:
// .list{
//   =rem('font-size', 16px); // font-size:1.6rem; font-size: 16px;
//   =rem('margin', 10px auto 10px); // margin: 1rem auto 1rem; margin: 10px auto 10px;
// }
@mixin rem($property, $values) {
	$px : ();
	$rem: ();

	@each $value in $values {
		@if $value == 0 or $value == auto {
			$px : append($px , $value);
			$rem: append($rem, $value);
		}

		@else if type-of($value) == number {
			$unit: unit($value);
			$val: parseInt($value);

			@if unitless($unit) {
				$unit: "px";
				$value: $value * 1px;
			}

			@if $unit == "px" {
				$px : append($px,  $value);
				$rem: append($rem, rem($value));
			}

			@if $unit == "rem" {
				$px : append($px,  rem($value));
				$rem: append($rem, $value);
			}
		}

		@else {
			$px : append($px,  $value);
			$rem: append($rem, $value);
		}
	}

	@if $px == $rem {
		#{$property}: $px;
	} @else {
		#{$property}: $px;
		#{$property}: $rem;
	}
}
